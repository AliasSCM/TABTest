//
//  CharacterInteractor.swift
//  TABTest
//
//  Created by master on 4/21/18.
//  Copyright (c) 2018 neemo. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

/// Declares all the business logic that is to be done for this use case  : MA-001
protocol CharacterBusinessLogic
{
   func getCharactersFromEndPoint(request: CharacterModels.ListCharacters.Request)
}
/// Datastore for character data at runtime
protocol CharacterDataStore
{
  var characters: [Character]! { get set }
}
///Class to implement all business logic related to character for use case : MA-001
class CharacterInteractor: CharacterBusinessLogic, CharacterDataStore
{
  var presenter     : CharacterPresentationLogic?
  var worker        : CharacterWorker = CharacterWorker.init(store: CharacterAPI())
  var characters    : [Character]!
  
    func getCharactersFromEndPoint(request: CharacterModels.ListCharacters.Request)
    {
        worker.getCharactersFromEndPoint() {response , error in
            if let theResponse = response
            {
               self.presenter?.presentCharacterList(response: theResponse)
            }
            if let theError = error
            {
                
            }
        }
    }
  // MARK: Do something
  
  /*func doSomething(request: Character.Something.Request)
  {
    worker = CharacterWorker()
    worker?.doSomeWork()
    
    let response = Character.Something.Response()
    presenter?.presentSomething(response: response)
  }*/
}
