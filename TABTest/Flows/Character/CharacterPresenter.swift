//
//  CharacterPresenter.swift
//  TABTest
//
//  Created by master on 4/21/18.
//  Copyright (c) 2018 neemo. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

/// Presentation Logic for entity Character.
protocol CharacterPresentationLogic{  /// Presentation logic to present a list of characters. Consumes  CharacterModels.ListCharacters.Response object for presentation logic.
    /// - parameter response: Response object containig an array of Character entities.
    func presentCharacterList(response: CharacterModels.ListCharacters.Response)
}
/// Character Presenter class that implements CharacterPresentationLogic.
class CharacterPresenter: CharacterPresentationLogic{
    /// The view controller instance that implements CharacterDisplayLogic. Presenter uses this to update views on view controller for actual display.
    weak var viewController: CharacterDisplayLogic?
    
    // MARK: Class Methods
    
    /// Class method that presents  CharacterTableViewCell using view model.
    /// - parameter cell: CharacterTableViewCell that displays the character.
    /// - parameter viewModel : viewModel Class that contains all the data to be represented on the view
    class func presentChacracterCell(cell : CharacterTableViewCell , viewModel : CharacterModels.ListCharacters.CharacterCellVM)
    {
        cell.chacracterImageView.loadImageUsingCache(withUrl: viewModel.photoUrl)
        cell.characterNameLabel.text = viewModel.nameString
        cell.setNeedsUpdateConstraints()
        cell.updateConstraints()
    }
    
    /// Class method that presents  CharacterDescriptionTableViewCell using view model.
    /// - parameter cell: CharacterDescriptionTableViewCell that displays the character decription.
    /// - parameter viewModel : viewModel Class that contains all the data to be represented on the view
    class func presentChacracterDescriptionCell(cell : CharacterDescriptionTableViewCell , viewModel : CharacterModels.CharacterDetail.CharacterDescriptionCellVM)
    {
        cell.descriptionLabel.text = viewModel.descriptionString
    }
    
    
    
    // MARK: CharacterPresentationLogic implementation.
    
    /// Method that presents an array of Character Entities into viewController.
    /// - parameter response: Response object containing an array of character entities.
    func presentCharacterList(response: CharacterModels.ListCharacters.Response)
    {
        let viewModel = CharacterViewModelFactory.makeCharacterListViewModel(characters: response.characters)
        viewController?.displayCharacterList(listViewModel: viewModel)
    }
}
/// Factory Class that creates ViewModels related to character entity.
class CharacterViewModelFactory{
    // MARK: Class Methods
    
    /// Class method that creates and returns CharacterListViewModels (CharacterModels.ListCharacters.CharacterListVM).
    /// - parameter characters: An array of character models.
    /// - returns : viewModel Class that contains information to render a list of Character entities
    class func makeCharacterListViewModel(characters : [Character]) -> CharacterModels.ListCharacters.CharacterListVM
    {
        var listViewModel = CharacterModels.ListCharacters.CharacterListVM()
        
        for character in characters
        {
            let cellViewModel = CharacterViewModelFactory.makeCharacterCellViewModel(character: character)
            listViewModel.cellViewModels.append(cellViewModel)
        }
        
        return listViewModel
    }
    /// Class method that creates and returns CharacterCellViewModels (CharacterModels.ListCharacters.CharacterCellVM).
    /// - parameter character: A single character models.
    /// - returns : viewModel Class that contains information to render a single Character entitie
    class func makeCharacterCellViewModel(character : Character) -> CharacterModels.ListCharacters.CharacterCellVM
    {
        var cellViewModel = CharacterModels.ListCharacters.CharacterCellVM()
      
        cellViewModel.nameString = character.name
        cellViewModel.photoUrl = character.thumbnail.fullPath
        print("Full Path" , cellViewModel.photoUrl)
          print("DESCRIPTION" , character.descrip)
        return cellViewModel
    }
    
    class func makeCharacterDetailViewModel(character : Character) -> CharacterModels.CharacterDetail.CharacterDetailVM
    {
        var viewModel = CharacterModels.CharacterDetail.CharacterDetailVM()
        viewModel.headingModel = CharacterViewModelFactory.makeCharacterCellViewModel(character: character)
        viewModel.descriptionVM = CharacterViewModelFactory.makeCharacterDescriptionViewModel(character: character)
        
        return viewModel
        
    }
    
    class func makeCharacterDescriptionViewModel(character : Character) ->CharacterModels.CharacterDetail.CharacterDescriptionCellVM
    {
        var viewModel = CharacterModels.CharacterDetail.CharacterDescriptionCellVM()
        if(character.descrip.count > 0)
        {
              viewModel.descriptionString = character.descrip
        }
        else
        {
            viewModel.descriptionString = "There is no description for this character"
        }
      
        
        return viewModel
    }
}
