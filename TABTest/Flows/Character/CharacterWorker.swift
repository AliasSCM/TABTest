//
//  CharacterWorker.swift
//  TABTest
//
//  Created by master on 4/21/18.
//  Copyright (c) 2018 neemo. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// Character Worker Class.
/// Class that does the work of CRUD operations related to character.
/// - important: This class requires to be initialized with an instance of CharacterStoreProtocol using which the worker can do CRUD operations.
class CharacterWorker{
    /// Character store protocol instance that worker uses for CRUD operations.
    /// - important: This dependency has to be fullfilled.
    var characterStore: CharacterStoreProtocol
    
    // MARK: Init Methods
    
    // Init Method.
    /// Initializing the worker with a class that implements CharacterStoreProtocol.
    /// - parameter store: Instance that implements CharacterStoreProtocol.
    required init(store : CharacterStoreProtocol)
    {
        self.characterStore  = store
    }
    // MARK: Public Worker Methods
    
    // Worker method that does the work of getting data from characterStore instance.
    /// - important: All cases of fetch results need to be handled and passed on.
    /// - parameter completionHandler: Handler function that is called when fetch completes. Passing, response object and error object as optionals
    /// - parameter response : Response object with array of characters
    /// - parameter error : error of type APIError
    func getCharactersFromEndPoint(completionHandler : @escaping (_ response :CharacterModels.ListCharacters.Response? , _ error : APIError?) -> Void)
    {
        self.characterStore.fetchCharacters(){result in
            switch result
            {
            case .Success(let response) :
                DispatchQueue.main.async
                {
                   completionHandler(response , nil)
                }
                break
            case .Failure(let error):
                DispatchQueue.main.async
                {
                    completionHandler(nil , error as? APIError)
                }
                break
            }
        }
        
    }
  
}
